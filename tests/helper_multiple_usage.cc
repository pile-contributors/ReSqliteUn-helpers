/* ========================================================================= */
/* ------------------------------------------------------------------------- */
/*!
\file         helperusage.cc
\date         February 2017
\author       Nicu Tofan

\brief        Base clss for tests.

*//*

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Please read COPYING and README files in root folder
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
//
//
//
//
/*  INCLUDES    ------------------------------------------------------------ */
#define _CRT_SECURE_NO_WARNINGS

#include "helper_multiple_usage.h"

/*  INCLUDES    ============================================================ */
//
//
//
//
/*  DEFINITIONS    --------------------------------------------------------- */


/*  DEFINITIONS    ========================================================= */
//
//
//
//
/*  FUNCTIONS    ----------------------------------------------------------- */

/* ------------------------------------------------------------------------- */
TestUsageMultiple::TestUsageMultiple () :
    db_list_ ()
{}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
TestUsageMultiple::~TestUsageMultiple ()
{}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
void TestUsageMultiple::SetUp ()
{
    for (;;) {
        sqlite3_config(SQLITE_CONFIG_SINGLETHREAD);
        ReSqliteUn::autoregister ();

        for (int i = 0; i < 120; ++i) {
            sqlite3 * db;
            int rc = sqlite3_open(":memory:", &db);
            if (rc != SQLITE_OK) {
                fprintf(stderr, "Cannot open database: %s\n",
                        sqlite3_errmsg(db));
            }
            ASSERT_EQ(rc, SQLITE_OK);
            db_list_.append (db);
        }

        break;
    }
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
void TestUsageMultiple::TearDown ()
{
    foreach(sqlite3 * db, db_list_) {
        sqlite3_close (db);
    }
}
/* ========================================================================= */

/*  FUNCTIONS    =========================================================== */
//
//
//
//

/* ------------------------------------------------------------------------- */
/* ========================================================================= */
